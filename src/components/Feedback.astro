---
// src/components/Feedback.astro
interface Props {
  postId: string;
}

const { postId } = Astro.props;

const feedbackOptions = [
  { value: 'amazing', icon: 'star-struck' },
  { value: 'good', icon: 'smile' },
  { value: 'bad', icon: 'frown' },
  { value: 'terrible', icon: 'crying' },
];
---

<div id="feedback-widget" class="mt-16 flex items-center justify-between rounded-full border border-[var(--color-border)] bg-[var(--color-card-bg)] p-2 pl-4 shadow-md transition-all duration-300">
  <p id="feedback-text" class="text-sm text-[var(--color-text-muted)]">
    Was this helpful?
  </p>
  <div id="feedback-buttons" class="flex items-center gap-1">
    {feedbackOptions.map(option => (
      <button type="button" title={option.value.charAt(0).toUpperCase() + option.value.slice(1)} class="group rounded-full p-1.5 transition-colors duration-200 hover:bg-[var(--color-border)]" data-feedback={option.value}>
        {option.icon === 'star-struck' && <svg class="h-5 w-5 text-[var(--color-text-muted)] group-hover:text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m12.728 0l-.707.707M15 13a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21.25 16.25L19 14l-2.25 2.25" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.75 16.25L5 14l2.25 2.25" /></svg>}
        {option.icon === 'smile' && <svg class="h-5 w-5 text-[var(--color-text-muted)] group-hover:text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>}
        {option.icon === 'frown' && <svg class="h-5 w-5 text-[var(--color-text-muted)] group-hover:text-orange-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>}
        {option.icon === 'crying' && <svg class="h-5 w-5 text-[var(--color-text-muted)] group-hover:text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5-4a.5.5 0 000-1H9a.5.5 0 000 1h2zm4 0a.5.5 0 000-1h-2a.5.5 0 000 1h2zm-2 7a1 1 0 100-2 1 1 0 000 2z" /></svg>}
      </button>
    ))}
  </div>
</div>

<script>
  const widget = document.getElementById('feedback-widget')!;
  const postId = widget.closest('article')?.querySelector('meta[itemprop="identifier"]')?.getAttribute('content') || window.location.pathname;
  const buttons = document.querySelectorAll<HTMLButtonElement>('[data-feedback]');
  const feedbackText = document.getElementById('feedback-text')!;
  const buttonContainer = document.getElementById('feedback-buttons')!;
  const hasVoted = localStorage.getItem(`feedback_${postId}`);

  if (hasVoted) {
    showThankYouMessage();
  } else {
    buttons.forEach(button => {
      button.addEventListener('click', handleFeedbackSubmit);
    });
  }

  async function handleFeedbackSubmit(event: MouseEvent) {
    const button = (event.currentTarget as HTMLButtonElement);
    const feedback = button.dataset.feedback;

    buttons.forEach(btn => btn.disabled = true);
    
    try {
        const response = await fetch('https://formspree.io/f/xgvybkyq', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ postId, feedback }),
      });

      if (!response.ok) {
        throw new Error('Failed to submit feedback');
      }

      localStorage.setItem(`feedback_${postId}`, 'true');

      showThankYouMessage();

    } catch (error) {
      console.error(error);
      feedbackText.textContent = "Oops! Something went wrong.";
      buttons.forEach(btn => btn.disabled = false);
    }
  }

  function showThankYouMessage() {
    feedbackText.textContent = 'Thanks for your feedback!';
    buttonContainer.innerHTML = '';
    widget.classList.remove('justify-between');
    widget.classList.add('justify-center');
  }
</script>