---
// src/components/blog/PostHeader.astro
interface Props {
  post: {
    title: string;
    url: string;
    published: string;
    content?: string; // Need content to calculate read time
    labels?: string[]; // To display labels/categories
    author?: {
      displayName: string;
      url: string;
      image?: {
        url: string;
      };
    };
  };
}

const { post } = Astro.props;

// Helper function to format date
const formatDate = (dateString: string): string => {
  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
  try {
    return new Date(dateString).toLocaleDateString('id-ID', options);
  } catch (e) {
    console.error("Invalid date string provided:", dateString, e);
    return "Invalid Date";
  }
};

// Helper function to calculate estimated read time
// Assumes average reading speed of 200 words per minute
const getReadTime = (contentHtml: string | undefined): string => {
  if (!contentHtml) return '0 min read';
  // Strip HTML tags for accurate word count
  const textContent = contentHtml.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, '');
  const words = textContent.split(/\s+/).filter(word => word.length > 0);
  const wordCount = words.length;
  const minutes = Math.ceil(wordCount / 200);
  return `${minutes} min read`;
};

// Helper function to get clean slug for breadcrumb (if needed)
const getSlugFromBloggerUrl = (url: string): string => {
  try {
    const urlObj = new URL(url);
    const pathParts = urlObj.pathname.split('/');
    const lastPart = pathParts[pathParts.length - 1];
    const slugWithHtml = lastPart.split('.')[0];
    const finalSlug = slugWithHtml.replace(/^\d{4}\/\d{2}\//, '').replace(/^\d{1,2}\./, '');
    return finalSlug || url;
  } catch (e) {
    console.error("Failed to parse slug from URL:", url, e);
    return url;
  }
};
---

<div class="relative w-full overflow-hidden mb-6 py-12 md:py-12 text-white text-left">
  <div class="relative z-10 max-w-4xl mx-auto px-4 md:px-0">
    <nav class="text-xs md:text-sm font-medium breadcrumbs text-gray-400 mb-4 flex items-center space-x-2">
      <a href="/" class="hover:text-white transition-colors">Home</a>
      <span class="text-gray-500">/</span>
      <a href="/blog" class="hover:text-white transition-colors">Blog</a>
      <span class="text-gray-500">/</span>
      <span class="font-semibold text-gray-200 max-w-[150px] md:max-w-xs truncate block">{post.title}</span>
    </nav>
    {post.labels && post.labels.length > 0 && (
      <div class="mb-4 flex flex-wrap gap-2">
        {post.labels.map(label => (
          <span class="bg-gray-700/50 text-blue-300 text-xs font-semibold px-3 py-1 rounded-full backdrop-blur-sm">
            {label.toUpperCase()}
          </span>
        ))}
      </div>
    )}
    <h1 class="text-4xl sm:text-5xl md:text-6xl font-extrabold mb-8 leading-tight tracking-tight text-white drop-shadow-sm">
      {post.title}
    </h1>
    <div class="flex flex-wrap items-center text-gray-400 text-sm md:text-base font-medium space-x-2 sm:space-x-4">
      {post.author?.image && (
        <img src={post.author.image.url} alt={post.author.displayName} class="w-7 h-7 rounded-full mr-1 object-cover border border-gray-700" />
      )}
      <span>
        Oleh <span class="font-semibold text-white">{post.author?.displayName || 'Unknown Author'}</span>
      </span>
      <span class="text-gray-500 hidden sm:inline-block">&bull;</span>
      <span class="mt-1 sm:mt-0">{formatDate(post.published)}</span>
      <span class="text-gray-500 hidden sm:inline-block">&bull;</span>
      <span class="mt-1 sm:mt-0">{getReadTime(post.content)}</span>
    </div>
  </div>
</div>
