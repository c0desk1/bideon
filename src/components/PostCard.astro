---
// src/components/posts/PostCard.astro
import {
  formatDate,
  estimateReadTime,
  getImageUrl,
  getAstroPostUrl,
  stripHtml
} from '../utils/helpers';

import type { Post } from '../lib/blogger';

interface Props {
  post: Post;
  isFeatured?: boolean;
}

const { post, isFeatured = false } = Astro.props;

const postUrl = getAstroPostUrl(post);
const title = post.title ?? "Tanpa Judul";
const image = getImageUrl(post);

const rawSummary = stripHtml(post.content || post.summary || "");
const maxLength = 150;
const summary = rawSummary.slice(0, maxLength);
const showEllipsis = rawSummary.length > maxLength;

const published = formatDate(post.published);
const readTime = estimateReadTime(post.content || "");
const authorName = post.author?.displayName ?? "Anonim";
const authorImage = post.author?.image?.url ?? '/default-author.png';
const labels = post.labels ?? [];
---

<article class="post-card">
  <a href={postUrl} class="image-link">
    <div class="image-wrapper">
      <img src={image} alt={title} loading="lazy"
        class="post-image"
      />
      {isFeatured && (
        <span class="featured-badge">
          FEATURED
        </span>
      )}
    </div>
  </a>

  <div class="content-section">
    <div class="meta-info">
      <i class="ri-calendar-line"></i>
      <time>{published}</time>
      <span>Ã—</span>
      <i class="ri-time-line"></i>
      <span>{readTime}</span>
    </div>

    <h3 class="post-title">
      <a href={postUrl} class="animated-underline">{title}</a>
    </h3>

    <p class="post-summary">{summary}{showEllipsis ? '...' : ''}</p>
    
    {authorName && authorImage && (
      <a href="/about" aria-label={`Tentang ${authorName}`}>
        <div class="author-section">
          <img
            src={authorImage}
            alt={authorName}
            class="author-image"
          />
          <span class="author-name animated-underline">{authorName}</span>
        </div>
      </a>
    )}
    
    {labels.length > 0 && (
      <div class="labels-container">
        {labels.slice(0, 3).map((label: string) => (
          <a href={`/blog?label=${encodeURIComponent(label)}`} class="label-tag">
            {label}
          </a>
        ))}
      </div>
    )}
  </div>
</article>