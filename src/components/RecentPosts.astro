---
// src/components/RecentPosts.astro
import { load } from 'cheerio';

const BLOG_ID = import.meta.env.VITE_BLOGGER_BLOG_ID;
const API_KEY = import.meta.env.VITE_BLOGGER_API_KEY;

let posts: any[] = [];

if (!BLOG_ID || !API_KEY) {
  console.error("Missing Blogger Blog ID or API Key. Please check your .env file.");
} else {
  try {
    const response = await fetch(
      `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts?key=${API_KEY}&maxResults=6&fetchImages=true&orderBy=published`
    );

    if (response.ok) {
      const data = await response.json();
      console.log('Blogger API Response Data:', JSON.stringify(data, null, 2));

      if (data && data.items && data.items.length > 0) {
        posts = data.items;
        console.log('Posts successfully retrieved:', posts.map(p => ({
            title: p.title,
            url: p.url,
            id: p.id,
            imageUrl: getImageUrl(p),
            summaryCleaned: stripHtml(p.summary || p.content || '').substring(0, 50) + '...',
            publishedDate: p.published,
            labels: p.labels
        })));
      } else {
        console.warn("Blogger API returned no items or empty data.");
      }
    } else {
      console.error(`Error fetching posts: ${response.status} - ${response.statusText}`);
      const errorText = await response.text();
      console.error('API Error Response:', errorText);
    }
  } catch (error) {
    console.error("Failed to fetch posts from Blogger API:", error);
  }
}

const featuredPost = posts.length > 0 ? posts[0] : null;
const regularPosts = posts.slice(1);

console.log('Featured Post:', featuredPost ? featuredPost.title : 'None');
console.log('Number of Regular Posts:', regularPosts.length);


function formatDate(dateString: string): string {
  if (!dateString) return '';
  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(dateString).toLocaleDateString('en-US', options);
}

function estimateReadTime(content: string): string {
    const wordsPerMinute = 200;
    const cleanContent = stripHtml(content);
    const wordCount = cleanContent.split(/\s+/).length;
    const minutes = Math.ceil(wordCount / wordsPerMinute);
    return `${minutes} min read`;
}

function stripHtml(html: string): string {
  const $ = load(html);
  return $.text();
}

function getImageUrl(post: any): string {
  if (post && post.images && Array.isArray(post.images) && post.images.length > 0) {
    return post.images[0].url;
  }
  if (post && post.content) {
    const $ = load(post.content);
    const imgUrl = $('img').attr('src');
    if (imgUrl) {
      return imgUrl;
    }
  }
  return 'https://via.placeholder.com/400x250?text=No+Image';
}

function getAstroPostUrl(post: any): string {
  if (post && post.id) {
    return `/post/${post.id}`;
  }
  return '#';
}
---

<section class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <h2 class="text-3xl font-bold text-center mb-8 text-hero-foreground">Recent Posts</h2>
  <div class="posts-grid">
    {featuredPost && (
      <article class="post-card group flex flex-col featured-article">
          <a href={getAstroPostUrl(featuredPost)} class="block h-full relative">
            <span class="featured-top-badge text-xs font-semibold px-2 py-1 rounded-full">Featured</span>
            
            <img src={getImageUrl(featuredPost)} alt={featuredPost.title} class="w-full h-48 object-cover rounded-t-lg transition-transform duration-300 group-hover:scale-105" loading="lazy" />
          </a>
          <div class="p-4 bg-black-900 flex-grow rounded-b-lg flex flex-col justify-between">
            <div>
              <div class="flex items-center text-sm text-color-text-muted mb-2">
                <i class="ri-calendar-line mr-1"></i> {formatDate(featuredPost.published)}
                <span class="mx-2">•</span>
                <i class="ri-time-line mr-1"></i> {estimateReadTime(featuredPost.content || featuredPost.summary || '')}
              </div>
              <h3 class="text-xl font-semibold text-color-text group-hover:text-color-text-hover transition mb-2">{featuredPost.title}</h3>
              <p class="text-sm text-hero-muted-foreground mt-1">{stripHtml(featuredPost.summary || featuredPost.content || '').substring(0, 100)}...</p>
            </div>
            
            <div>
              {featuredPost.author && (
                <div class="text-sm text-color-text-muted mb-2">
                  By <span class="text-color-text">{featuredPost.author.displayName}</span>
                </div>
              )}
              {featuredPost.labels && featuredPost.labels.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {featuredPost.labels.map((label: string) => (
                    <span class="bg-white/10 text-white/80 backdrop-blur-md shadow-lg border border-white/10 text-xs px-2 py-1 rounded-full">{label}</span>
                  ))}
                </div>
              )}
            </div>
          </div>
      </article>
    )}

    {regularPosts.length > 0 ? (
      regularPosts.map((post) => (
        <article class="post-card group flex flex-col">
          <a href={getAstroPostUrl(post)} class="block h-full relative">
            {post.labels && post.labels.length > 0 && (
              <div class="absolute top-3 left-3 bg-gray-700 text-white text-xs px-2 py-1 rounded-full z-10">{post.labels[0]}</div>
            )}
            <img src={getImageUrl(post)} alt={post.title} class="w-full h-48 object-cover rounded-t-lg transition-transform duration-300 group-hover:scale-105" loading="lazy" />
          </a>
          <div class="p-4 bg-gray-900 flex-grow rounded-b-lg flex flex-col justify-between">
            <div>
              <div class="flex items-center text-sm text-color-text-muted mb-2">
                <i class="ri-calendar-line mr-1"></i> {formatDate(post.published)}
                <span class="mx-2">•</span>
                <i class="ri-time-line mr-1"></i> {estimateReadTime(post.content || post.summary || '')}
              </div>
              <h3 class="text-xl font-semibold text-color-text group-hover:text-color-text-hover transition mb-2">{post.title}</h3>
              <p class="text-sm text-color-text-muted mb-4">{stripHtml(post.summary || post.content || '').substring(0, 100)}...</p>
            </div>
            
            <div>
              {post.author && (
                <div class="text-sm text-color-text-muted mb-2">
                  By <span class="text-color-text">{post.author.displayName}</span>
                </div>
              )}
              {post.labels && post.labels.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {post.labels.map((label: string) => (
                    <span class="bg-white/10 text-white/80 backdrop-blur-md text-xs px-2 py-1 rounded-full">{label}</span>
                  ))}
                </div>
              )}
            </div>
          </div>
        </article>
      ))
    ) : (
      <p class="text-center text-color-text-muted col-span-full">No posts available. Please check your Blogger API configuration or blog content.</p>
    )}
  </div>
</section>