---
interface Props {
  title?: string;
  rightIcon?: "bookmark" | "share";
}

const {
  title: propTitle = "NOTME",
  rightIcon = "bookmark"
} = Astro.props;

let headerTitle: string = propTitle;

try {
    const response = await fetch("https://www.googleapis.com/blogger/v3/blogs/5920132421647282747?key=AIzaSyAF5IX_benL0vfFXYas3BYQrenGpbl4hek"); // Mengambil info blog, bukan postingan

    if (response.ok) {
        const data = await response.json();
        if (data && data.name) {
            headerTitle = data.name;
        } else {
            const postsResponse = await fetch("https://www.googleapis.com/blogger/v3/blogs/5920132421647282747/posts?key=AIzaSyAF5IX_benL0vfFXYas3BYQrenGpbl4hek&maxResults=1");
            if (postsResponse.ok) {
                const postsData = await postsResponse.json();
                if (postsData.items && postsData.items.length > 0) {
                    headerTitle = postsData.items[0].title;
                }
            }
        }
    }
} catch (error) {
    console.error("Gagal mengambil data dari Blogger API:", error);
}

if (Astro.url.pathname === '/404' || Astro.url.pathname === '/404/') {
  headerTitle = "ERROR";
} else if (Astro.url.pathname === '/about' || Astro.url.pathname === '/about/') {
  headerTitle = "About";
} else if (Astro.url.pathname === '/contact' || Astro.url.pathname === '/contact/') {
  headerTitle = "Contact";
}

const navItems = [
  { label: "Home", href: "/" },
  { label: "Blog", href: "/blog" },
  { label: "About", href: "/about" },
  { label: "Contact", href: "/contact" },
];
---

<header class="fixed top-0 inset-x-0 z-50 bg-black/60 backdrop-blur border-b border-white/10 items-center">
  <div class="max-w-7xl mx-auto flex items-center justify-between h-16">
    <button id="menu-button" class="text-white text-2xl transition md:hidden justify-start" aria-label="Toggle Menu">
      <i id="menu-icon" class="ri-menu-3-line"></i>
    </button>

    <div class="text-base font-semibold text-white text-center md:text-left cursor-pointer justify-start">
      {headerTitle}
    </div>

    <nav class="hidden md:flex items-center space-x-6 uppercase text-sm font-medium flex-grow justify-center">
      {navItems.map((item) => (
        <a href={item.href} class="text-white hover:text-gray-200 transition">{item.label}</a>
      ))}
    </nav>

    <div class="text-white text-xl justify-end">
      {rightIcon === "bookmark" && (
        <button id="bookmark-button" aria-label="Bookmark" class="hover:text-gray-200 transition cursor-pointer">
          <i class="ri-bookmark-line"></i>
        </button>
      )}
      {rightIcon === "share" && (
        <button id="share-button" aria-label="Share" class="hover:text-gray-200 transition cursor-pointer">
          <i class="ri-share-forward-line"></i>
        </button>
      )}
    </div>
  </div>

  <div id="mobile-menu" class="md:hidden max-h-0 overflow-hidden transition-all duration-300 ease-in-out bg-black/80 border-t border-white/10">
    <nav class="flex flex-col px-6 py-4 space-y-4 uppercase text-sm font-medium items-center">
      {navItems.map((item) => (
        <a href={item.href} class="text-white hover:text-gray-200 transition">{item.label}</a>
      ))}
    </nav>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const toggleBtn = document.getElementById("menu-button");
    const menu = document.getElementById("mobile-menu");
    const icon = document.getElementById("menu-icon");
    const bookmarkBtn = document.getElementById("bookmark-button");

    if (!toggleBtn || !menu || !icon) return;

    const bookmarkButton = document.getElementById("bookmark-button");
  if (bookmarkButton) {
    const updateBookmarkStatus = () => {
      const currentPage = window.location.href;
      const bookmarks = JSON.parse(localStorage.getItem('bookmarks') || '[]');
      const bookmarkIcon = bookmarkButton.querySelector('i');

      if (bookmarkIcon) {
        if (bookmarks.includes(currentPage)) {
          bookmarkIcon.className = "ri-bookmark-fill";
        } else {
          bookmarkIcon.className = "ri-bookmark-line";
        }
      }
    };

    updateBookmarkStatus();

    bookmarkButton.addEventListener("click", () => {
      const currentPage = window.location.href;
      let bookmarks = JSON.parse(localStorage.getItem('bookmarks') || '[]');

      if (bookmarks.includes(currentPage)) {
        bookmarks = bookmarks.filter((url: string) => url !== currentPage);
        alert("Bookmark dihapus!");
      } else {
        bookmarks.push(currentPage);
        alert("Bookmark ditambahkan!");
      }
      localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
      updateBookmarkStatus();
    });
  }

  const shareButton = document.getElementById("share-button");
  if (shareButton) {
    shareButton.addEventListener("click", async () => {
      const shareData = {
        title: document.title || "Halaman ini",
        text: "Lihat halaman menarik ini: ",
        url: window.location.href,
      };

      try {
        if (navigator.share) {
          await navigator.share(shareData);
          console.log('Konten berhasil dibagikan');
        } else {
          navigator.clipboard.writeText(shareData.url).then(() => {
              alert("URL halaman disalin ke clipboard!");
          }).catch(err => {
              console.error('Gagal menyalin URL: ', err);
              alert("Browser Anda tidak mendukung Web Share API. URL: " + shareData.url);
          });
        }
      } catch (error) {
        console.error('Gagal membagikan:', error);
      }
    });
  }

    toggleBtn.addEventListener("click", () => {
      menu.classList.toggle("max-h-0");
      menu.classList.toggle("max-h-64");

      const isOpen = icon.classList.contains("ri-close-line");
      icon!.className = isOpen ? "ri-menu-3-line" : "ri-close-line";
    });
  });
</script>
