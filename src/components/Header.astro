---
// Header.astro
import { Image } from 'astro:assets';
import logo from '../assets/bimaakbar-logo.svg';

interface Props {
  title?: string;
}

const { title = 'Bima Akbar' } = Astro.props;

const navItems = [
  { label: "Home", href: "/" },
  { label: "Blog", href: "/blog" },
  { label: "About", href: "/about" },
  { label: "Contact", href: "/contact" },
];
---

<header id="main-header" class="fixed top-0 inset-x-0 z-50 backdrop-blur">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-16 w-full flex items-center justify-between gap-4">
    
    <!-- Left Section -->
    <div class="flex items-center md:flex-1 md:justify-start space-x-3">
      <button id="menu-button" class="text-color-text text-2xl md:hidden" aria-label="Toggle Menu">
        <i id="menu-icon" class="ri-menu-3-line"></i>
      </button>
      <a href="/" class="hidden md:flex items-center space-x-2">
        <Image 
          src={logo} 
          alt="Logo" 
          width={32} 
          height={32} 
          class="object-contain h-6 w-6 text-[var(--color-text)] hover:text-[var(--color-text-hover)]" 
        />
        <span class="text-color-text text-base font-semibold">{title}</span>
      </a>
    </div>

    <!-- Center Section -->
    <div class="flex-1 text-center min-w-0">
      <a href="/" class="md:hidden inline-flex justify-center items-center">
        <Image src={logo} alt="Logo" class="h-8 w-8 object-contain mx-auto" />
      </a>
      <nav class="hidden md:flex justify-center space-x-6 uppercase text-sm font-medium text-color-text">
        {navItems.map((item) => (
          <a href={item.href} class="hover:text-color-text-hover transition">{item.label}</a>
        ))}
      </nav>
    </div>

    <!-- Right Section -->
    <div class="w-10 md:w-auto flex justify-end items-center md:flex-1 md:justify-end space-x-3 text-color-text text-xl">
      <button id="theme-toggle" class="theme-toggle" aria-label="Toggle Dark/Light Mode">
        <i class="icon sun-icon ri-sun-line"></i>
        <div class="theme-toggle-thumb"></div>
        <i class="icon moon-icon ri-moon-line"></i>
      </button>
    </div>
  </div>

  <!-- Mobile Navigation -->
  <div id="mobile-menu" class="mobile-menu-bg rounded-lg md:hidden max-h-0 overflow-hidden transition-all duration-300 ease-in-out">
    <nav class="flex flex-col px-6 py-4 space-y-4 uppercase text-sm font-medium items-center">
      {navItems.map((item) => (
        <a href={item.href} class="text-[var(--color-text)] hover:text-[var(--color-text-hover)] transition">{item.label}</a>
      ))}
    </nav>
  </div>
</header>

<!-- Scripts -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuButton = document.getElementById("menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIcon = document.getElementById("menu-icon");
    const mainHeader = document.getElementById("main-header");
    const themeToggle = document.getElementById("theme-toggle");
    const htmlElement = document.documentElement;

    // Theme Toggle
    if (themeToggle && htmlElement) {
      const setTheme = (theme) => {
        if (theme === 'light') {
          htmlElement.classList.add('light-mode');
          localStorage.setItem('theme', 'light');
        } else {
          htmlElement.classList.remove('light-mode');
          localStorage.setItem('theme', 'dark');
        }
      };

      const storedTheme = localStorage.getItem('theme');
      const prefersLight = window.matchMedia('(prefers-color-scheme: light)').matches;

      if (storedTheme) {
        setTheme(storedTheme);
      } else {
        setTheme(prefersLight ? 'light' : 'dark');
      }

      themeToggle.addEventListener('click', () => {
        const currentTheme = htmlElement.classList.contains('light-mode') ? 'light' : 'dark';
        setTheme(currentTheme === 'dark' ? 'light' : 'dark');
      });
    }

    // Mobile Menu Toggle
    if (menuButton && mobileMenu && menuIcon) {
      menuButton.addEventListener("click", () => {
        mobileMenu.classList.toggle("max-h-0");
        mobileMenu.classList.toggle("max-h-64");

        const isOpen = menuIcon.classList.contains("ri-close-line");
        menuIcon.className = isOpen ? "ri-menu-3-line" : "ri-close-line";
      });
    }

    // Header Scroll Behavior
    if (mainHeader) {
      const handleScroll = () => {
        if (window.scrollY > 5) {
          mainHeader.classList.add("scrolled-header");
        } else {
          mainHeader.classList.remove("scrolled-header");
        }
      };

      window.addEventListener("scroll", handleScroll);
      handleScroll();
    }
  });
</script>