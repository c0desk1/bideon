---
// src/components/posts/PostComments.astro
interface Props {
  postId: string;
  blogId: string;
}

const { postId, blogId } = Astro.props;
const apiKey = import.meta.env.VITE_BLOGGER_API_KEY;
const googleClientId = import.meta.env.VITE_PUBLIC_GOOGLE_CLIENT_ID;
const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
---

<section id="comments-section" class="border-t border-[var(--color-border)] py-8">
  <h2 class="text-2xl font-bold text-[var(--color-text)] mb-6">Komentar</h2>

  <div id="comment-action-area" class="mb-8">
    <div id="signin-prompt">
      <button id="signin-button" class="inline-flex items-center gap-2 rounded-md cursor-pointer bg-[var(--color-bg)] border border-[var(--color-border)] px-4 py-2 font-semibold text-[var(--color-text)] transition hover:border-[var(--color-accent)]">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor"><path d="M20.283 10.356h-8.327v3.451h4.792c-.446 2.193-2.313 3.453-4.792 3.453a5.27 5.27 0 0 1-5.279-5.28 5.27 5.27 0 0 1 5.279-5.279c1.259 0 2.397.447 3.29 1.178l2.6-2.599c-1.584-1.381-3.615-2.233-5.89-2.233a8.908 8.908 0 0 0-8.934 8.934 8.907 8.907 0 0 0 8.934 8.934c4.955 0 8.522-3.469 8.522-8.592 0-.612-.054-1.227-.152-1.808z"/></svg>
        Login dengan Google untuk berkomentar
      </button>
    </div>

    <div id="comment-form-container" class="hidden">
      <div class="flex items-center gap-3 mb-3">
        <img id="user-avatar" class="h-10 w-10 rounded-full" />
        <span id="user-name" class="font-semibold text-[var(--color-text)]"></span>
      </div>
      <form id="comment-form">
        <textarea
          id="comment-textarea"
          rows="4"
          placeholder="Tulis komentar Anda..."
          class="w-full rounded-md border border-[var(--color-border)] bg-[var(--color-card-bg)] p-3 text-[var(--color-text)] focus:border-[var(--color-accent)] focus:outline-none focus:ring-1 focus:ring-[var(--color-accent)]"
          required
        ></textarea>
        <div class="cf-turnstile" data-sitekey={turnstileSiteKey}></div>
        <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
        <button type="submit" id="submit-comment-button" class="mt-3 rounded-md bg-[var(--color-accent)] px-5 py-2 font-semibold text-white transition hover:bg-[var(--color-accent-dark)] disabled:cursor-not-allowed disabled:bg-opacity-50 cursor-pointer">
          Kirim
        </button>
      </form>
    </div>
  </div>

  <div id="comments-list" class="space-y-6">
    <p id="comments-loader" class="text-[var(--color-text-muted)]">Memuat komentar...</p>
  </div>

  <template id="comment-template">
    <div class="comment-item flex items-start gap-4">
      <img src="" alt="Author avatar" class="author-avatar h-10 w-10 rounded-full bg-[var(--color-border)]" />
      <div class="flex-1">
        <div class="flex items-center gap-3">
          <span class="author-name font-semibold text-[var(--color-text)]"></span>
          <span class="publish-date text-sm text-[var(--color-text-muted)]"></span>
        </div>
        <div class="comment-content prose prose-sm mt-1 text-[var(--color-text)]"></div>
      </div>
    </div>
  </template>
</section>

<script is:inline define:vars={{ postId, blogId, apiKey, googleClientId, turnstileSiteKey }}>
  let tokenClient;
  let accessToken = null;
  let currentUserInfo = null;

  const commentsList = document.getElementById('comments-list');
  const commentsLoader = document.getElementById('comments-loader');
  const commentTemplate = document.getElementById('comment-template');
  const signinPrompt = document.getElementById('signin-prompt');
  const signinButton = document.getElementById('signin-button');
  const commentFormContainer = document.getElementById('comment-form-container');
  const commentForm = document.getElementById('comment-form');
  const commentTextarea = document.getElementById('comment-textarea');
  const submitCommentButton = document.getElementById('submit-comment-button');

  document.addEventListener('DOMContentLoaded', () => {
    loadGsiClient();
    fetchComments();
    signinButton.addEventListener('click', requestAccessToken);
    commentForm.addEventListener('submit', handleCommentSubmit);
  });

  function loadGsiClient() {
    const script = document.createElement('script');
    script.src = 'https://accounts.google.com/gsi/client';
    script.async = true;
    script.defer = true;
    script.onload = initializeGsi;
    document.body.appendChild(script);
  }

  function initializeGsi() {
    tokenClient = google.accounts.oauth2.initTokenClient({
      client_id: googleClientId,
      scope: 'https://www.googleapis.com/auth/blogger',
      callback: handleTokenResponse,
    });
  }

  function requestAccessToken() {
    if (tokenClient) {
      tokenClient.requestAccessToken();
    }
  }

  async function handleTokenResponse(tokenResponse) {
    accessToken = tokenResponse.access_token;
    if (accessToken) {
      await updateUiForAuthState();
    } else {
      console.error("Failed to obtain access token.");
    
    }
  }

  async function updateUiForAuthState() {
    if (accessToken) {
      try {
        const response = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        });
        if (!response.ok) throw new Error('Failed to fetch user info');
        currentUserInfo = await response.json();

        document.getElementById('user-avatar').src = currentUserInfo.picture;
        document.getElementById('user-name').textContent = currentUserInfo.name;

        signinPrompt.classList.add('hidden');
        commentFormContainer.classList.remove('hidden');
      } catch (error) {
        console.error("Error fetching user info:", error);
        alert("Gagal memuat info pengguna. Silakan coba login lagi.");
        accessToken = null;
        signinPrompt.classList.remove('hidden');
        commentFormContainer.classList.add('hidden');
      }
    } else {
        signinPrompt.classList.remove('hidden');
        commentFormContainer.classList.add('hidden');
    }
  }

  async function handleCommentSubmit(event) {
    event.preventDefault();
    const commentContent = commentTextarea.value.trim();
    if (!commentContent) {
      alert("Komentar tidak boleh kosong.");
      return;
    }
    if (!accessToken) {
      alert("Anda harus login untuk berkomentar.");
      return;
    }

    const turnstileToken = document.querySelector('[name="cf-turnstile-response"]')?.value;
    if (!turnstileToken) {
      alert("Verifikasi bot gagal. Coba ulangi atau refresh halaman.");
      return;
    }

    submitCommentButton.disabled = true;
    submitCommentButton.textContent = 'Mengirim...';
    submitCommentButton.classList.add('opacity-50', 'cursor-not-allowed');

    try {
      const response = await fetch('/api/submit-comment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: commentContent,
          postId,
          blogId,
          accessToken,
          turnstileToken,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Gagal mengirim komentar melalui server.');
      }

      const result = await response.json();
      const newComment = result.comment;
      
      addCommentToDom(newComment, true);
      commentTextarea.value = '';
      
     
      if (window.turnstile) {
          window.turnstile.reset();
      }

    } catch (error) {
      console.error("Error sending comment:", error);
      alert(`Gagal mengirim komentar: ${error.message}. Silakan coba lagi.`);
    } finally {
      submitCommentButton.disabled = false;
      submitCommentButton.textContent = 'Kirim';
      submitCommentButton.classList.remove('opacity-50', 'cursor-not-allowed');
    }
  }

  async function fetchComments() {
    commentsLoader.textContent = 'Memuat komentar...';
    commentsLoader.style.display = 'block';

    const url = `https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts/${postId}/comments?key=${apiKey}&fetchBodies=true`;
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Gagal mengambil komentar: ${response.statusText}`);
      }
      const data = await response.json();

      commentsLoader.style.display = 'none';
      commentsList.innerHTML = '';

      if (data.items && data.items.length > 0) {
        const sortedComments = data.items.sort((a, b) => new Date(b.published).getTime() - new Date(a.published).getTime());
        sortedComments.forEach(comment => addCommentToDom(comment));
      } else {
        commentsList.innerHTML = '<p class="text-[var(--color-text-muted)]">Jadilah yang pertama berkomentar.</p>';
      }
    } catch (error) {
      console.error("Error fetching comments:", error);
      commentsLoader.textContent = 'Gagal memuat komentar.';
      commentsLoader.style.display = 'block';
    }
  }

  function addCommentToDom(comment, prepend = false) {

    if (commentsList.querySelector('.comment-item') === null && commentsList.querySelector('p')) {
        commentsList.innerHTML = '';
    }

    const templateNode = commentTemplate.content.cloneNode(true);
    const commentItem = templateNode.querySelector('.comment-item');
    const avatar = commentItem.querySelector('.author-avatar');
    
    let avatarUrl = comment.author.image?.url || 'https://www.blogger.com/img/avatar_round_blue_34.png';
    
    if (avatarUrl.startsWith('http')) {
      avatarUrl = avatarUrl.replace(/^https?:\/\//, '//');
    }
    avatarUrl = avatarUrl.replace('/s35-c/', '/s40-c/');

    avatar.src = avatarUrl;
    commentItem.querySelector('.author-name').textContent = comment.author.displayName || 'Anonim';
    commentItem.querySelector('.publish-date').textContent = new Date(comment.published).toLocaleDateString('id-ID', {
      day: 'numeric', month: 'long', year: 'numeric'
    });
    commentItem.querySelector('.comment-content').innerHTML = comment.content;

    if (prepend) {
      commentsList.prepend(commentItem);
    } else {
      commentsList.appendChild(commentItem);
    }
  }
</script>