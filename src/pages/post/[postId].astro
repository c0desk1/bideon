---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostHeader from '../../components/posts/PostHeader.astro';
import PostBody from '../../components/posts/PostBody.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import ReadingProgress from '../../components/ReadingProgress.astro';
import { parse as parseHtml } from 'node-html-parser';
import { formatDate, estimateReadTime, getImageUrl } from '../../utils/helpers';

export async function getStaticPaths() {
  const BLOG_ID = import.meta.env.BLOGGER_BLOG_ID;
  const API_KEY = import.meta.env.BLOGGER_API_KEY;

  if (!BLOG_ID || !API_KEY) {
    console.error("Missing Blogger Blog ID or API Key for getStaticPaths.");
    return [];
  }

  let allPosts: any[] = [];
  try {
    const response = await fetch(
      `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts?key=${API_KEY}&maxResults=500&fetchImages=true`
    );
    if (response.ok) {
      const data = await response.json();
      if (data && data.items) {
        allPosts = data.items;
      }
    } else {
      console.error(`Error fetching posts for getStaticPaths: ${response.status} - ${response.statusText}`);
    }
  } catch (error) {
    console.error("Failed to fetch posts for getStaticPaths:", error);
  }

  return allPosts.map(post => ({
    params: { postId: post.id },
    props: { post: post },
  }));
}

const { post } = Astro.props;
const postTitle = post?.title || 'No Title';
const postPublishedDate = formatDate(post?.published || '');
const postUpdatedDate = formatDate(post?.updated || '');
const postReadTime = estimateReadTime(post?.content || post?.summary || '');
const postAuthorName = post?.author?.displayName || '';
const postAuthorImage = post?.author?.image?.url;
const postLabels = post?.labels || [];
const dummyViewsCount = Math.floor(Math.random() * 5000) + 100;

interface HeadingData {
  id: string;
  level: number;
  text: string;
}

let tocHeadings: HeadingData[] = [];
if (post?.content) {
  const root = parseHtml(post.content);
  let headingCounter = 0;

  root.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((headingEl: { tagName: string; id: string; setAttribute: (arg0: string, arg1: any) => void; innerText: any; }) => {
    const level = parseInt(headingEl.tagName.substring(1), 10);
    let id = headingEl.id || `heading-${headingCounter++}`;
    headingEl.setAttribute('id', id);

    tocHeadings.push({ id, level, text: headingEl.innerText });
  });
  post.content = root.outerHTML;
}
---

<BaseLayout>
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12 pt-24">
    {post ? (
      <article>
        {post.images && post.images.length > 0 && (
            <img src={getImageUrl(post)} alt={post.title} class="w-full h-auto rounded-lg mb-8" />
        )}
        <PostHeader
          title={postTitle}
          authorName={postAuthorName}
          authorImage={postAuthorImage}
          publishedDate={postPublishedDate}
          updatedDate={postUpdatedDate}
          readTime={postReadTime}
          viewsCount={dummyViewsCount}
          labels={postLabels}
        />
        {tocHeadings.length > 0 && (
          <TableOfContents headings={tocHeadings} />
        )}
        <PostBody content={post.content || ''} />
      </article>
    ) : (
      <p class="text-center text-color-text-muted">Post not found.</p>
    )}
  </div>
  <ReadingProgress />
</BaseLayout>