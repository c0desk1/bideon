---
// src/pages/post/[postId].astro
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostHeader from '../../components/posts/PostHeader.astro';
import PostBody from '../../components/posts/PostBody.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import ShareButtons from '../../components/posts/SharePosts.astro';
import ReadingProgress from '../../components/ReadingProgress.astro';
import RelatedPosts from '../../components/posts/RelatedPosts.astro';
import PostNavigation from '../../components/posts/PostNavigation.astro';
import Feedback from '../../components/Feedback.astro';
import PostComments from '../../components/posts/PostComments.astro';
import NewsletterForm from '../../components/NewsletterForm.astro';
import { parse as parseHtml } from 'node-html-parser';
import { formatDate, estimateReadTime} from '../../utils/helpers';
import { fetchBlogPostById, fetchAllPostsForRelated, getRelatedPosts, type Post } from '../../lib/blogger';

export async function getStaticPaths() {
  const BLOG_ID = String(Astro.locals.runtime.env.VITE_BLOGGER_BLOG_ID);
  const API_KEY = String(Astro.locals.runtime.env.VITE_BLOGGER_API_KEY);

  if (!BLOG_ID || !API_KEY) {
    console.error("[getStaticPaths] Missing Blogger Blog ID or API Key.");
    return [];
  }

  let allPostIds: string[] = [];
  try {
    const response = await fetch(
      `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts?key=${API_KEY}&fields=items(id)&maxResults=500`
    );
    if (response.ok) {
      const data: { items?: Array<{ id: string }> } = await response.json();
      if (data && data.items) {
        allPostIds = data.items.map(item => item.id);
      }
    } else {
      console.error(`[getStaticPaths] Error fetching post IDs: ${response.status} - ${response.statusText}`);
    }
  } catch (error) {
    console.error("Failed to fetch post IDs for getStaticPaths:", error);
  }

  return allPostIds.map(id => ({ params: { postId: id } }));
}

const { postId } = Astro.params;
const { locals } = Astro;

let post: Post | null = null;
let relatedPosts: Post[] = [];
let prevPost: Post | undefined = undefined;
let nextPost: Post | undefined = undefined;
let authorAbout: string = "Penulis dan kreator di blog ini.";

const BLOG_ID_ENV = String(locals.runtime.env.VITE_BLOGGER_BLOG_ID);
const API_KEY_ENV = String(locals.runtime.env.VITE_BLOGGER_API_KEY);

if (BLOG_ID_ENV && API_KEY_ENV) {
  try {
    post = await fetchBlogPostById(postId, BLOG_ID_ENV, API_KEY_ENV);

    if (post) {
      const allPostsMetadata = await fetchAllPostsForRelated(BLOG_ID_ENV, API_KEY_ENV);
      const currentIndex = allPostsMetadata.findIndex(p => p.id === post!.id);

      if (currentIndex !== -1) {
        relatedPosts = getRelatedPosts(allPostsMetadata, post, 3);
        prevPost = allPostsMetadata[currentIndex - 1] ?? undefined;
        nextPost = allPostsMetadata[currentIndex + 1] ?? undefined;
      }

      if (post.author?.id) {
        try {
          const res = await fetch(`https://www.googleapis.com/blogger/v3/users/${post.author.id}?key=${API_KEY_ENV}`);
          if (res.ok) {
            const profileData: { about?: string } = await res.json();
            authorAbout = profileData?.about || authorAbout;
          }
        } catch (e) {
          console.error(`Gagal mengambil profil untuk penulis ID: ${post.author.id}`, e);
        }
      }
    }
  } catch (error) {
    console.error(`Error fetching post data for ${postId}:`, error);
  }
} else {
  console.error("Kredensial Blogger tidak ditemukan untuk SSR halaman postingan.");
}


const postTitle = post?.title || 'No Title';
const postPublishedDate = formatDate(post?.published || '');
const postUpdatedDate = formatDate(post?.updated || '');
const postReadTime = estimateReadTime(post?.content || post?.summary || '');
const postAuthorName = post?.author?.displayName || '';
const postAuthorImage = post?.author?.image?.url;
const postLabels = post?.labels || [];

let plainText = '';
let ogImage = null;
if (post?.content) {
  const root = parseHtml(post.content);
  plainText = root.innerText;
  const firstImg = root.querySelector('img');
  if (firstImg) {
    ogImage = firstImg.getAttribute('src');
  }
}
const postDescription = plainText.slice(0, 150);


interface HeadingData {
  id: string;
  level: number;
  text: string;
}

let tocHeadings: HeadingData[] = [];
if (post?.content) {
  const root = parseHtml(post.content);
  let headingCounter = 0;
  root.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach(headingEl => {
    const level = parseInt(headingEl.tagName.substring(1), 10);
    let id = headingEl.id || `heading-${headingCounter++}`;
    headingEl.setAttribute('id', id);

    tocHeadings.push({ id, level, text: headingEl.innerText });
  });
  post.content = root.outerHTML;
}

const homeCrumb = { name: "Home", url: "/" };
const categoryCrumb = post?.labels && post.labels.length > 0
  ? { name: post.labels[0], url: `/category/${encodeURIComponent(post.labels[0])}` }
  : null;

const BLOG_ID_FOR_COMMENTS = BLOG_ID_ENV;

---

<BaseLayout
  title={postTitle}
  description={postDescription}
  image={ogImage || '/bimaakbar-og-default.png'}
  url={`https://bimaakbar.my.id/post/${postId}`}>
  <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-4 pt-16">
    {post ? (
      <article>
        <PostHeader title={postTitle} authorName={postAuthorName} authorImage={postAuthorImage} publishedDate={postPublishedDate} updatedDate={postUpdatedDate} readTime={postReadTime} labels={postLabels} homeCrumb={homeCrumb} categoryCrumb={categoryCrumb} />
        {tocHeadings.length > 0 && (
          <TableOfContents headings={tocHeadings} />
        )}
        <PostBody content={post.content || ''} /> 
        <Feedback postId={post.id} />
        <ShareButtons title={postTitle} url={Astro.url.href} />
        <PostComments postId={post.id} blogId={BLOG_ID_FOR_COMMENTS} />
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
        {relatedPosts && relatedPosts.length > 0 && (
          <RelatedPosts relatedPosts={relatedPosts} />
        )}
      </article>
    ) : (
      <p class="text-center text-color-text-muted">Post not found.</p>
    )}
    <NewsletterForm />
  </div>
  <ReadingProgress />
  
  <script>
    if (typeof window !== 'undefined') {
      document.addEventListener("DOMContentLoaded", () => {
        const tocList = document.getElementById('toc-list');
        if (!tocList) return;

        const tocItems = tocList.querySelectorAll('.toc-item');
        const headingElements: HTMLElement[] = [];

        tocItems.forEach(item => {
          const id = (item as HTMLElement).dataset.id;
          if (id) {
            const heading = document.getElementById(id);
            if (heading) {
              headingElements.push(heading);
            }
          }
        });

        if (headingElements.length === 0) return;
        const observerOptions = {
          root: null,
          rootMargin: '-50% 0px -50% 0px',
          threshold: 0
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            const targetId = entry.target.id;
            const correspondingTocItem = tocList.querySelector(`[data-id="${targetId}"]`) as HTMLElement;

            if (correspondingTocItem) {
              if (entry.isIntersecting) {
                tocItems.forEach(item => item.classList.remove('active'));
                correspondingTocItem.classList.add('active');
              }
            }
          });
        }, observerOptions);
        headingElements.forEach(heading => observer.observe(heading));
        if (headingElements.length > 0) {
            const firstTocItem = tocList.querySelector(`[data-id="${headingElements[0].id}"]`) as HTMLElement;
            if (firstTocItem && !tocList.querySelector('.toc-item.active')) {
                firstTocItem.classList.add('active');
            }
        }
      });
    }
  </script>
</BaseLayout>
