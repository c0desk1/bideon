---
// src/pages/blog/[slug].astro
interface Post {
  id: string;
  title: string;
  url: string;
  published: string;
  content?: string;
  summary?: string;
  images?: Array<{ url: string }>;
  labels?: string[];
  author?: {
    displayName: string;
    url: string;
    image?: {
      url: string;
    };
  };
}

import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import PostHeader from '../../components/PostHeader.astro';
import PostHero from '../../components/PostHero.astro';

import * as cheerio from 'cheerio';

const API_KEY = import.meta.env.VITE_BLOGGER_API_KEY;
const BLOG_ID = import.meta.env.VITE_BLOGGER_BLOG_ID;

if (!API_KEY || !BLOG_ID) {
  console.error("⛔️ Error: Blogger API Key or Blog ID is missing from environment variables (.env file).");
  console.error("Please ensure VITE_BLOGGER_API_KEY and VITE_BLOGGER_BLOG_ID are correctly set in your .env file.");
}

export async function getStaticPaths() {
  const API_KEY_IN_PATHS: string | undefined = import.meta.env.VITE_BLOGGER_API_KEY;
  const BLOG_ID_IN_PATHS: string | undefined = import.meta.env.VITE_BLOGGER_BLOG_ID;

  if (!API_KEY_IN_PATHS || !BLOG_ID_IN_PATHS) {
    console.error("⛔️ Build Error: API Key or Blog ID is missing for getStaticPaths. Please check your .env file.");
    throw new Error("Missing Blogger API Key or Blog ID for getStaticPaths");
  }

  const BASE_URL_IN_PATHS = `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID_IN_PATHS}/posts?key=${API_KEY_IN_PATHS}`;

  let paths: { params: { slug: string } }[] = [];
  let nextPageToken: string | undefined = undefined;

  const getCleanSlug = (url: string): string => {
    try {
      const urlObj = new URL(url);
      const pathParts = urlObj.pathname.split('/');
      const lastPart = pathParts[pathParts.length - 1];
      const slugWithHtml = lastPart.split('.')[0];
      const finalSlug = slugWithHtml.replace(/^\d{4}\/\d{2}\//, '').replace(/^\d{1,2}\./, '');
      return finalSlug;
    } catch (e) {
      console.error("Failed to parse slug from URL in getStaticPaths:", url, e);
      return url;
    }
  };

  do {
    const response: Response = await fetch(`${BASE_URL_IN_PATHS}&maxResults=500${nextPageToken ? `&pageToken=${nextPageToken}` : ''}`);
    if (!response.ok) {
      console.error(`🚨 Failed to fetch posts for getStaticPaths: ${response.status} - ${response.statusText}`);
      break;
    }
    const data = await response.json();
    if (data.items) {
      for (const post of data.items as Post[]) {
        const slug = getCleanSlug(post.url);
        if (slug) {
          paths.push({ params: { slug: slug } });
        } else {
          console.warn("Could not generate a clean slug for post URL:", post.url);
        }
      }
    }
    nextPageToken = data.nextPageToken;
  } while (nextPageToken);

  return paths;
}

const { slug } = Astro.params;

let post: Post | null = null;
let postTitle: string = "Halaman Tidak Ditemukan";

const BASE_API_URL_FOR_PAGE = `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts?key=${API_KEY}`;

try {
  const searchResponse = await fetch(`${BASE_API_URL_FOR_PAGE}&q=${encodeURIComponent(slug)}&maxResults=10`);
  if (searchResponse.ok) {
    const searchData = await searchResponse.json();
    if (searchData.items && searchData.items.length > 0) {
      post = searchData.items.find((item: Post) => {
        const itemUrlObj = new URL(item.url);
        const itemPathParts = itemUrlObj.pathname.split('/');
        const itemLastPart = itemPathParts[itemPathParts.length - 1];
        const itemSlug = itemLastPart.split('.')[0].replace(/^\d{4}\/\d{2}\//, '').replace(/^\d{1,2}\./, '');
        return itemSlug === slug;
      });
    }
  }

  if (!post) {
      const allPostsResponse = await fetch(`${BASE_API_URL_FOR_PAGE}&maxResults=500`);
      if (allPostsResponse.ok) {
          const allPostsData = await allPostsResponse.json();
          if (allPostsData.items) {
              post = allPostsData.items.find((item: Post) => {
                  const itemUrlObj = new URL(item.url);
                  const itemPathParts = itemUrlObj.pathname.split('/');
                  const itemLastPart = itemPathParts[itemPathParts.length - 1];
                  const itemSlug = itemLastPart.split('.')[0].replace(/^\d{4}\/\d{2}\//, '').replace(/^\d{1,2}\./, '');
                  return itemSlug === slug;
              });
          }
      }
  }

  if (post) {
    postTitle = post.title;
  }

} catch (error) {
  console.error(`🚨 Failed to fetch post with slug '${slug}':`, error);
}

const renderContent = (htmlString: string | undefined): string => {
  return htmlString || '';
};
---

<BaseLayout title={postTitle}>
  <Header title={postTitle} rightIcon="share" />
  <main class="container mx-auto px-4 py-24 md:py-32 text-white">
    {post ? (
      <article class="max-w-3xl mx-auto">
        <PostHeader post={post} />
		<PostHero post={post} />
          <div class="prose prose-invert prose-lg max-w-none text-gray-200 leading-relaxed break-words">
            <Fragment set:html={renderContent(post.content)} />
          </div>
        <div class="mt-12 pt-8 border-t border-gray-700 text-center">
          <p class="text-gray-500 text-sm">Terima kasih sudah membaca!</p>
          <a href="/blog" class="inline-flex items-center text-blue-500 hover:text-blue-400 transition-colors mt-4">
            <svg class="mr-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
            Kembali ke Blog
          </a>
        </div>
      </article>
    ) : (
      <div class="max-w-xl mx-auto text-center bg-gray-900 p-10 rounded-xl shadow-2xl border border-gray-700">
        <h1 class="text-4xl font-extrabold text-red-500 mb-4">404</h1>
        <p class="text-gray-300 text-lg mb-6">Ups! Postingan yang Anda cari tidak ditemukan.</p>
        <a href="/blog" class="inline-flex items-center text-blue-500 hover:text-blue-400 transition-colors">
          <svg class="mr-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
          Kembali ke Daftar Blog
        </a>
      </div>
    )}
  </main>
</BaseLayout>
