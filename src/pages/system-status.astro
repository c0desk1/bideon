---
// src/pages/statistik-system.astro
import BaseLayout from '../layouts/BaseLayout.astro';

interface Props {
  title?: string;
}

const { title = "Status Sistem" } = Astro.props;
---

<BaseLayout title={title}>
  <main class="container">
    <div class="status-summary-top-card" id="status-summary-top-card">
      <div class="icon-wrapper">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="status-icon" id="global-status-icon">
          <path id="status-icon-path-safe" fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 0 0 0 1.14-.094l3.75-5.25Z" clip-rule="evenodd" />
          <path id="status-icon-path-warning" class="hidden" fill-rule="evenodd" d="M9.401 3.003c1.155-2 4.043-2 5.197 0l7.153 12.492c1.155 2-.291 4.5-2.599 4.5H4.847c-2.308 0-3.754-2.5-2.599-4.5L9.401 3.003ZM12 8.25a.75.75 0 0 1 .75.75v3.75a.75.75 0 0 1-1.5 0V9a.75.75 0 0 1 .75-.75Zm0 6a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="text-content">
        <h1 class="main-status-text" id="main-status-text">Semua Sistem Beroperasi</h1>
        <p class="last-updated-text">Terakhir diperbarui: <span id="last-updated-time">Memuat...</span></p>
      </div>
    </div>

    <section class="section">
      <h2 class="section-title">Detail Layanan</h2>
      <div id="service-details-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <p class="text-color-text-muted">Memuat detail layanan...</p>
      </div>
    </section>

    <section class="section chart-section">
      <h2 class="section-title">Metrik Performa Sistem (24 Jam Terakhir)</h2>
      <div class="chart-grid">
        <div class="chart-card">
          <h3 class="chart-card-title">CPU Usage</h3>
          <div class="chart-container">
            <canvas id="cpuChart"></canvas>
          </div>
        </div>
        <div class="chart-card">
          <h3 class="chart-card-title">Memory Usage</h3>
          <div class="chart-container">
            <canvas id="memoryChart"></canvas>
          </div>
        </div>
        <div class="chart-card full-width-chart">
          <h3 class="chart-card-title">Network Latency</h3>
          <div class="chart-container">
            <canvas id="latencyChart"></canvas>
          </div>
        </div>
      </div>
    </section>

    <section class="section" id="past-incidents-section">
      <h2 class="section-title">Insiden Lalu</h2>
      <div id="past-incidents-container" class="space-y-4">
        <p class="text-color-text-muted">Memuat insiden lalu...</p>
      </div>
    </section>

    <section class="section" id="scheduled-maintenance-section">
      <h2 class="section-title">Pemeliharaan Terjadwal</h2>
      <div id="scheduled-maintenance-container" class="space-y-4">
        <p class="text-color-text-muted">Memuat pemeliharaan terjadwal...</p>
      </div>
    </section>

    <a href="/" class="back-link">Â«Kembali ke Beranda</a>
  </main>
</BaseLayout>

<style>
  .container {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .status-summary-top-card {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    background-color: var(--color-card-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.75rem;
    padding: 1.5rem 2.5rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    margin-bottom: 2rem;
    text-align: left;
  }

  .status-summary-top-card .icon-wrapper {
    flex-shrink: 0;
  }

  .status-summary-top-card .status-icon {
    width: 3rem;
    height: 3rem;
    color: var(--color-accent);
  }
  .status-summary-top-card.status-warning .status-icon {
    color: #f5a623;
  }
  .status-summary-top-card.status-error .status-icon {
    color: #ff0000;
  }

  .status-summary-top-card .main-status-text {
    font-size: 2rem;
    font-weight: 700;
    color: var(--color-text);
    margin: 0;
  }
  .status-summary-top-card.status-safe .main-status-text {
    color: var(--color-accent);
  }
  .status-summary-top-card.status-warning .main-status-text {
    color: #f5a623;
  }
  .status-summary-top-card.status-error .main-status-text {
    color: #ff0000;
  }


  .status-summary-top-card .last-updated-text {
    font-size: 0.9rem;
    color: var(--color-text-muted);
    margin: 0;
  }

  .section {
    background-color: var(--color-card-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.75rem;
    padding: 2rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .section-title {
    font-size: 1.75rem;
    color: var(--color-text);
    margin-bottom: 1.5rem;
    font-weight: 600;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: 1rem;
  }

  .grid {
    display: grid;
    gap: 1rem;
  }
  
  .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
  @media (min-width: 768px) {
    .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  }
  @media (min-width: 1024px) {
    .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
  }

  .service-card {
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    transition: all 0.2s ease-in-out;
  }
  .service-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    border-color: var(--color-accent);
  }

  .service-card-title {
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--color-text);
  }

  .service-status-text {
    font-size: 0.9rem;
    font-weight: 600;
  }
  .service-status-text.operational { color: var(--color-accent); }
  .service-status-text.perhatian { color: #f5a623; }
  .service-status-text.bermasalah { color: #ff0000; }

  .service-metrics {
    font-size: 0.85rem;
    color: var(--color-text-muted);
  }

  .detail-card {
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .detail-card-title {
    font-size: 1rem;
    font-weight: 500;
    color: var(--color-text-muted);
  }
  .detail-card-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-text);
  }
  .metric-good { color: var(--color-accent); }
  .metric-warning { color: #f5a623; }
  .metric-bad { color: #ff0000; }
  .progress-bar-container {
    width: 100%; height: 8px; background-color: var(--color-border);
    border-radius: 4px; margin-top: 0.5rem; overflow: hidden;
  }
  .progress-bar {
    height: 100%; border-radius: 4px; transition: width 0.5s ease-in-out;
  }
  .progress-bar.good { background-color: var(--color-accent); }
  .progress-bar.warning { background-color: #f5a623; }
  .progress-bar.bad { background-color: #ff0000; }

  .chart-section {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .chart-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .chart-card {
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1rem;
    display: flex;
    flex-direction: column;
  }
  .chart-card-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-text);
    margin-bottom: 1rem;
    text-align: center;
  }

  .chart-container {
    position: relative;
    width: 100%;
    height: 250px;
    flex-grow: 1;
  }

  .chart-card.full-width-chart {
    grid-column: 1 / -1; /* Mengambil seluruh lebar di grid */
    height: 350px; /* Lebih tinggi untuk chart yang lebih lebar */
  }

  @media (max-width: 767px) {
    .status-summary-top-card {
      flex-direction: column;
      text-align: center;
    }
    .chart-grid {
      grid-template-columns: 1fr;
    }
    .chart-card.full-width-chart {
      height: 250px;
    }
  }

  .incident-card, .maintenance-card {
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1.25rem;
    transition: all 0.2s ease-in-out;
  }
  .incident-card:hover, .maintenance-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    border-color: var(--color-accent);
  }

  .incident-card-title, .maintenance-card-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-text);
    margin-bottom: 0.5rem;
  }
  .incident-card-status {
    font-size: 0.9rem;
    font-weight: 500;
    color: #ff0000;
    margin-bottom: 0.5rem;
  }
  .maintenance-card-status {
    font-size: 0.9rem;
    font-weight: 500;
    color: #f5a623;
    margin-bottom: 0.5rem;
  }

  .incident-card-time, .maintenance-card-time {
    font-size: 0.8rem;
    color: var(--color-text-muted);
    margin-bottom: 0.75rem;
  }
  .incident-card-description, .maintenance-card-description {
    font-size: 0.9rem;
    color: var(--color-text);
    line-height: 1.5;
  }
  .incident-card-link, .maintenance-card-link {
    display: inline-block;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: var(--color-accent);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  .incident-card-link:hover, .maintenance-card-link:hover {
    color: var(--color-accent-dark);
    text-decoration: underline;
  }

  .back-link {
    display: inline-block;
    margin-top: 2rem;
    padding: 0.75rem 1.25rem;
    background-color: var(--color-accent);
    color: var(--color-text);
    text-decoration: none;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease-in-out;
    font-weight: 500;
  }

  .back-link:hover {
    background-color: var(--color-accent-dark);
    text-decoration: none;
  }
</style>

<script is:inline>
   let cpuChartInstance, memoryChartInstance, latencyChartInstance;
  const getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
  const parseRgb = (rgbString) => {
    const parts = rgbString.match(/\d+/g);
    return parts ? parts.map(Number) : [0, 0, 0];
  };

  const updateChartColors = (chartInstance) => {
      if (!chartInstance) return;

      const textColor = getCssVar('--color-text');
      const textMutedColor = getCssVar('--color-text-muted');
      const borderColor = getCssVar('--color-border');
      const accentColor = getCssVar('--color-accent');
      const accentRgb = parseRgb(getCssVar('--color-text-rgb'));
      const warningColor = '#f5a623';

      if (chartInstance.options.scales.x) chartInstance.options.scales.x.ticks.color = textMutedColor;
      if (chartInstance.options.scales.y) chartInstance.options.scales.y.ticks.color = textMutedColor;
      if (chartInstance.options.scales.x) chartInstance.options.scales.x.grid.color = borderColor;
      if (chartInstance.options.scales.y) chartInstance.options.scales.y.grid.color = borderColor;
      if (chartInstance.options.plugins && chartInstance.options.plugins.legend) chartInstance.options.plugins.legend.labels.color = textColor;
      if (chartInstance.options.plugins && chartInstance.options.plugins.tooltip) {
          chartInstance.options.plugins.tooltip.titleColor = textColor;
          chartInstance.options.plugins.tooltip.bodyColor = textColor;
          chartInstance.options.plugins.tooltip.backgroundColor = getCssVar('--color-card-bg');
          chartInstance.options.plugins.tooltip.borderColor = borderColor;
      }

      chartInstance.data.datasets.forEach(dataset => {
          if (dataset.label.includes('CPU') || dataset.label.includes('Memory') || dataset.label.includes('Disk')) {
              dataset.borderColor = accentColor;
              dataset.backgroundColor = `rgba(${accentRgb[0]}, ${accentRgb[1]}, ${accentRgb[2]}, 0.1)`;
          } else if (dataset.label.includes('Latency') || dataset.label.includes('API Response Time')) {
              dataset.borderColor = warningColor;
              dataset.backgroundColor = `rgba(245, 166, 35, 0.1)`;
          }
      });
      chartInstance.update();
  };

  const createOrUpdateChart = (canvasId, label, unit, data, instanceRef) => {
    const ctx = document.getElementById(canvasId);
    if (!ctx) return null;

    const textColor = getCssVar('--color-text');
    const textMutedColor = getCssVar('--color-text-muted');
    const borderColor = getCssVar('--color-border');
    const accentColor = getCssVar('--color-accent');
    const accentRgb = parseRgb(getCssVar('--color-text-rgb'));
    const warningColor = '#f5a623';

    const datasetColor = label.includes('Latency') ? warningColor : accentColor;
    const datasetBgColor = label.includes('Latency') ? `rgba(245, 166, 35, 0.1)` : `rgba(${accentRgb[0]}, ${accentRgb[1]}, ${accentRgb[2]}, 0.1)`;

    if (instanceRef) {
      instanceRef.data.labels = data.map(d => d.time);
      instanceRef.data.datasets[0].data = data.map(d => d.value);
      instanceRef.update();
    } else {
      instanceRef = new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.map(d => d.time),
          datasets: [{
            label: `${label} (${unit})`,
            data: data.map(d => d.value),
            borderColor: datasetColor,
            backgroundColor: datasetBgColor,
            tension: 0.4,
            fill: true,
            pointRadius: 0,
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          animation: {
              duration: 500
          },
          scales: {
            x: {
              grid: {
                color: borderColor,
                drawBorder: false,
              },
              ticks: {
                color: textMutedColor,
              }
            },
            y: {
              grid: {
                color: borderColor,
                drawBorder: false,
              },
              ticks: {
                color: textMutedColor,
                callback: function(value) {
                  return `${value}${unit}`;
                }
              },
              min: 0,
              max: (label.includes('CPU') || label.includes('Memory') || label.includes('Disk')) ? 100 : undefined,
            }
          },
          plugins: {
            legend: {
              display: true,
              labels: {
                color: textColor,
              }
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              backgroundColor: getCssVar('--color-card-bg'),
              titleColor: textColor,
              bodyColor: textColor,
              borderColor: borderColor,
              borderWidth: 1,
              padding: 10,
              callbacks: {
                  label: function(context) {
                      return `${context.dataset.label}: ${context.raw}${unit}`;
                  }
              }
            }
          }
        }
      });
    }
    updateChartColors(instanceRef);
    return instanceRef;
  };


  document.addEventListener('DOMContentLoaded', async () => {
    const statusSummaryTopCard = document.getElementById('status-summary-top-card');
    const mainStatusText = document.getElementById('main-status-text');
    const globalStatusIcon = document.getElementById('global-status-icon');
    const statusIconPathSafe = document.getElementById('status-icon-path-safe');
    const statusIconPathWarning = document.getElementById('status-icon-path-warning');
    const lastUpdatedTime = document.getElementById('last-updated-time');
    const serviceDetailsContainer = document.getElementById('service-details-container');
    const metricDetailsContainer = document.getElementById('metric-details-container');
    const pastIncidentsContainer = document.getElementById('past-incidents-container');
    const scheduledMaintenanceContainer = document.getElementById('scheduled-maintenance-container');


    const fetchDetailedSystemStatus = async () => {
      try {
        const response = await fetch('/api/system-status.json');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        statusSummaryTopCard.classList.remove('status-safe', 'status-warning', 'status-error');
        statusIconPathSafe.classList.add('hidden');
        statusIconPathWarning.classList.add('hidden');

        if (data.status === 'aman') {
          statusSummaryTopCard.classList.add('status-safe');
          mainStatusText.textContent = data.message || 'Semua Sistem Beroperasi Penuh';
          statusIconPathSafe.classList.remove('hidden');
        } else if (data.status === 'bermasalah') {
          statusSummaryTopCard.classList.add('status-error');
          mainStatusText.textContent = data.message || 'Insiden Dilaporkan!';
          statusIconPathWarning.classList.remove('hidden');
        } else if (data.status === 'perhatian') {
          statusSummaryTopCard.classList.add('status-warning');
          mainStatusText.textContent = data.message || 'Perhatian Diperlukan';
          statusIconPathWarning.classList.remove('hidden');
        } else {
          statusSummaryTopCard.classList.add('status-warning');
          mainStatusText.textContent = 'Status Tidak Diketahui';
          statusIconPathWarning.classList.remove('hidden');
        }

        lastUpdatedTime.textContent = new Date(data.timestamp).toLocaleString('id-ID', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          day: '2-digit',
          month: 'short',
          year: 'numeric'
        });

        let serviceHtml = '';
        if (data.services && data.services.length > 0) {
          data.services.forEach(service => {
            let serviceStatusClass = '';
            if (service.status === 'operational') serviceStatusClass = 'operational';
            else if (service.status === 'perhatian') serviceStatusClass = 'perhatian';
            else if (service.status === 'bermasalah') serviceStatusClass = 'bermasalah';

            serviceHtml += `
              <div class="service-card">
                <h3 class="service-card-title">${service.name}</h3>
                <p class="service-status-text ${serviceStatusClass}">${service.message || service.status.toUpperCase()}</p>
                <div class="service-metrics">
                  ${service.latency ? `<span>Latensi: ${service.latency}</span>` : ''}
                  ${service.errorRate ? `<span>Error Rate: ${service.errorRate}</span>` : ''}
                </div>
              </div>
            `;
          });
        } else {
          serviceHtml = '<p class="text-color-text-muted">Tidak ada detail layanan yang tersedia saat ini.</p>';
        }
        serviceDetailsContainer.innerHTML = serviceHtml;

        let metricHtml = '';
        const metrics = data.metrics || {};
        for (const key in metrics) {
          let value = metrics[key];
          let valueClass = '';
          let progressBarHtml = '';

          if (key === 'cpu_usage' || key === 'memory_usage' || key === 'disk_usage') {
            const num = parseFloat(String(value));
            if (num > 80) valueClass = 'metric-bad';
            else if (num > 60) valueClass = 'metric-warning';
            else valueClass = 'metric-good';

            progressBarHtml = `
              <div class="progress-bar-container">
                <div class="progress-bar ${valueClass}" style="width: ${num}%;"></div>
              </div>
            `;
          } else if (key === 'network_throughput') {
            const num = parseFloat(String(value));
            if (num < 200) valueClass = 'metric-warning';
            else if (num < 100) valueClass = 'metric-bad';
            else valueClass = 'metric-good';
          }

          metricHtml += `
            <div class="detail-card">
              <p class="detail-card-title">${key.replace(/_/g, ' ').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}</p>
              <p class="detail-card-value ${valueClass}">${value}</p>
              ${progressBarHtml}
            </div>
          `;
        }
        if (metricHtml === '') {
          metricDetailsContainer.innerHTML = '<p class="text-color-text-muted">Tidak ada metrik infrastruktur yang tersedia saat ini.</p>';
        } else {
          metricDetailsContainer.innerHTML = metricHtml;
        }

        const history = data.history || [];
        const cpuData = history.map(h => ({ time: h.time, value: parseFloat(h.cpu_usage) }));
        const memoryData = history.map(h => ({ time: h.time, value: parseFloat(h.memory_usage) }));
        const latencyData = history.map(h => ({ time: h.time, value: parseFloat(h.network_latency) }));

        cpuChartInstance = createOrUpdateChart('cpuChart', 'CPU Usage', '%', cpuData, cpuChartInstance);
        memoryChartInstance = createOrUpdateChart('memoryChart', 'Memory Usage', '%', memoryData, memoryChartInstance);
        latencyChartInstance = createOrUpdateChart('latencyChart', 'Network Latency', 'ms', latencyData, latencyChartInstance);

        let incidentsHtml = '';
        if (data.pastIncidents && data.pastIncidents.length > 0) {
          data.pastIncidents.forEach(incident => {
            incidentsHtml += `
              <div class="incident-card">
                <h3 class="incident-card-title">${incident.title}</h3>
                <p class="incident-card-status">Status: ${incident.status}</p>
                <p class="incident-card-time">${incident.date}</p>
                <p class="incident-card-description">${incident.description}</p>
                ${incident.link ? `<a href="${incident.link}" class="incident-card-link">Lihat Detail â</a>` : ''}
              </div>
            `;
          });
        } else {
          incidentsHtml = '<p class="text-color-text-muted">Tidak ada insiden yang dilaporkan baru-baru ini.</p>';
        }
        pastIncidentsContainer.innerHTML = incidentsHtml;

        let maintenanceHtml = '';
        if (data.scheduledMaintenances && data.scheduledMaintenances.length > 0) {
          data.scheduledMaintenances.forEach(maintenance => {
            maintenanceHtml += `
              <div class="maintenance-card">
                <h3 class="maintenance-card-title">${maintenance.title}</h3>
                <p class="maintenance-card-status">Status: ${maintenance.status}</p>
                <p class="maintenance-card-time">${maintenance.date}</p>
                <p class="maintenance-card-description">${maintenance.description}</p>
                ${maintenance.link ? `<a href="${maintenance.link}" class="maintenance-card-link">Lihat Detail â</a>` : ''}
              </div>
            `;
          });
        } else {
          maintenanceHtml = '<p class="text-color-text-muted">Tidak ada pemeliharaan terjadwal saat ini.</p>';
        }
        scheduledMaintenanceContainer.innerHTML = maintenanceHtml;

      } catch (error) {
        console.error('Gagal memuat detail sistem:', error);
        statusSummaryTopCard.classList.remove('status-safe', 'status-warning');
        statusSummaryTopCard.classList.add('status-error');
        mainStatusText.textContent = 'Status Tidak Tersedia';
        statusIconPathSafe.classList.add('hidden');
        statusIconPathWarning.classList.remove('hidden');
        lastUpdatedTime.textContent = 'N/A';
        serviceDetailsContainer.innerHTML = '<p class="text-color-text-muted">Maaf, gagal memuat detail layanan sistem.</p>';
        metricDetailsContainer.innerHTML = '<p class="text-color-text-muted">Maaf, gagal memuat metrik infrastruktur.</p>';
        pastIncidentsContainer.innerHTML = '<p class="text-color-text-muted">Gagal memuat insiden lalu.</p>';
        scheduledMaintenanceContainer.innerHTML = '<p class="text-color-text-muted">Gagal memuat pemeliharaan terjadwal.</p>';
      }
    };

    const themeObserver = new MutationObserver(() => {
        updateChartColors(cpuChartInstance);
        updateChartColors(memoryChartInstance);
        updateChartColors(latencyChartInstance);
    });
    themeObserver.observe(document.documentElement, { attributes: true, attributeFilter: ['class', 'data-theme'] });

    fetchDetailedSystemStatus();
    setInterval(fetchDetailedSystemStatus, 30 * 1000);
  });
</script>